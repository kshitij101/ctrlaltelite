{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","picLoading","setPicLoading","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","variant","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","pic","alt","md","ScrollableChat","colors","toxicClasses","map","display","label","placement","hasArrow","mt","mr","cursor","toxicClass","backgroundColor","marginLeft","padding","maxWidth","outline","marginBottom","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","console","log","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","isClassifying","setisClassifying","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","barValue","setBarValue","messageClass","setMessageClass","isMessageToxic","setIsMessageToxic","isError","setMessageError","searchTerm","setSearchTerm","delayDebounceFn","setTimeout","classifyMessage","newPosition","Math","min","parseInt","clearTimeout","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","isToxic","parseFloat","class","split","includes","indexOf","emit","sendMessage","event","CustomProgressBar","classification","arrowPosition","index","flex","height","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","as","FaSortDown","top","left","transform","io","on","newMessageRecieved","chat","typingHandler","lastTypingTime","Date","getTime","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","options","textAlign","justify","borderColor","isDisabled","Chatbox","ChatLoading","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6e68926.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n      {/* <Button\n        variant=\"solid\"\n        colorScheme=\"red\"\n        width=\"100%\"\n        onClick={() => {\n          setEmail(\"guest@example.com\");\n          setPassword(\"123456\");\n        }}\n      >\n        Get Guest User Credentials\n      </Button> */}\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router\";\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  // const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n        },\n        config\n      );\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Maru Bot Chat\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast ,Flex, Progress, Icon, Tooltip} from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport React from \"react\";\nimport { FaArrowRight,FaSortDown } from 'react-icons/fa';\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:3001\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\nconst colors = ['green','blue','yellow','orange','red'];\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isClassifying,setisClassifying] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const [barValue, setBarValue] = useState(0);\n  const [messageClass,setMessageClass] = useState(0);\n  const [isMessageToxic,setIsMessageToxic] = useState(0);\n  const [isError,setMessageError] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('')\n\n  useEffect(() => {\n    const delayDebounceFn = setTimeout(async () => {\n      console.log(searchTerm)\n      // Send Axios request here\n      if(newMessage.length > 0 && isClassifying == false) {\n        await classifyMessage()\n        const newPosition= Math.min((parseInt(messageClass))-1, colors.length - 1);\n        setBarValue(newPosition);\n      }\n      // const newPosition = Math.min((parseInt(e.target.value.length)-1), colors.length - 1);\n    },500 )\n\n    return () => clearTimeout(delayDebounceFn)\n  }, [searchTerm])\n\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const classifyMessage = async () => {\n    const toxicClasses = ['obscene', 'threat', 'insult', 'identity-hate','severe-toxic']\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n      setisClassifying(true)\n      console.log(\"---\",loading)\n\n      const { data } = await axios.post(\n        `/api/classify/`,{message: newMessage},\n        config\n      );\n      // setMessages(data);\n      // let toxicClass = data.class.split(\"\\n\")[1]\n      // console.log(\"Message Class\", toxicClass);\n      // console.log(toxicClasses.indexOf(data.class.split(\" \")[1].split(\"\\r\")[0]))\n      // console.log(parseFloat(data.class.split(\" \")[0]))\n      // console.log(data.class.includes('severe-toxic'))\n      let isToxic = parseFloat(data.class.split(\" \")[0])\n      if(isToxic > 0.5){\n        if(data.class.includes('severe-toxic')){\n          setMessageError(true)\n          setIsMessageToxic(true)\n        }\n        if(isToxic > 0.8){\n          setMessageError(true)\n          setIsMessageToxic(true)\n        }\n        setMessageClass(toxicClasses.indexOf(data.class.split(\" \")[1].split(\"\\r\")[0]))\n      }\n      else{\n        setMessageError(false)\n        setIsMessageToxic(false)\n        setMessageClass(0)\n      }\n\n        // return toxicClass\n      setisClassifying(false)\n      setLoading(false);\n\n    } catch (error) {\n      console.log(error);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Classify the Messages\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const handleSearch = async () => {\n    try {\n      console.log(\"HERE\")\n\n    } catch (error) {\n      console.log(error);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Classify the Messages\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n    \n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            toxicClass: isMessageToxic ? 0 : messageClass,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 6000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  const CustomProgressBar = ({value}) => {\n    const colors = ['blue.400', 'teal.400', 'green.400', 'yellow.400', 'orange.400', 'red.400']\n    const toxicClasses = ['obscene', 'threat', 'insult', 'identity-hate','severe-toxic']\n    const classification = messageClass\n    console.log(\"Classification ---- \",classification)\n    const arrowPosition = classification\n    return (\n      <div>\n        <Flex position=\"relative\">\n          {colors.map((color, index) => (\n            <Tooltip label={toxicClasses[index]} placement=\"top\">\n            <Box\n              key={index}\n              flex=\"1\"\n              height=\"20px\"\n              bg={color}\n              borderTopLeftRadius={index === 0 ? 'md' : '0'}\n              borderBottomLeftRadius={index === 0 ? 'md' : '0'}\n              borderTopRightRadius={index === colors.length - 1 ? 'md' : '0'}\n              borderBottomRightRadius={index === colors.length - 1 ? 'md' : '0'}\n              marginLeft={index <= colors.length - 1 ? '2px' : '0'}\n              marginBottom=\"10px\"\n            />\n          </Tooltip>\n          ))}\n            <Icon\n              as={FaSortDown}\n              color=\"Black\"\n              position=\"absolute\"\n              top=\"-20px\"\n              left={`${(100 / colors.length) * arrowPosition}%`}\n              transform=\"translateX(-50%)\"\n            />\n        </Flex>\n      </div>\n    );\n  };\n  \n  \n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = async (e) => {\n    setBarValue(0);\n    setMessageError(false)\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n    // const newValue = parseInt(e.target.value.length)-1;\n    // const newValue =  Math.floor(Math.random() * (5 - 1 + 1) + 1)\n    // console.log(newValue,colors[newValue]);\n    // const newPosition = Math.min((parseInt(e.target.value.length)-1), colors.length - 1);\n    \n    // setArrowPosition(newPosition);\n\n    // await classifyMessage()\n    // const newPosition = Math.min((parseInt(messageClass)-1), colors.length - 1);\n    // setBarValue(newPosition);\n\n    setSearchTerm(e.target.value)\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            {/* {loading ? \n              (isClassifying ? \n                (\n                  <Box>\n                    <Spinner size=\"xl\" w={20} h={20} alignSelf=\"center\" margin=\"auto\" /> \n                    <Text fontSize='2xl'>Classigying your message</Text>\n                  </Box>\n                ) : \n                (\n                  <Spinner size=\"xl\" w={20} h={20} alignSelf=\"center\" margin=\"auto\" /> \n                )\n              ) : \n              (\n                <div className=\"messages\"> \n                  <ScrollableChat messages={messages} /> \n                </div> \n              )\n            } */}\n\n            <FormControl\n              // onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              {/* <ProgressBar value={barValue} /> */}\n              {isClassifying ? (<Text textAlign=\"center\" fontSize='2xl'>Classifying your message</Text>) : (<CustomProgressBar value={barValue} />)}\n              <Flex justify=\"space-between\">\n                <Input\n                  variant=\"filled\"\n                  bg=\"#E0E0E0\"\n                  placeholder=\"Enter a message..\"\n                  value={newMessage}\n                  onChange={typingHandler}\n                  borderColor={isError ? 'red.500' : '#E0E0E0'}\n                  borderWidth={isError ? '2px' : '0px'}\n                />\n                <Tooltip label=\"Not Allowed to send message classified as Severe Toxic\" isOpen={isError} placement=\"top\">\n                  <Button isDisabled={isError || isClassifying} onClick={sendMessage}> Send </Button>\n                </Tooltip>\n              </Flex>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n  \n  const colors = ['blue', 'teal', 'green', 'yellow', 'orange', 'red']\n  const toxicClasses = ['obscene', 'threat', 'insult', 'identity-hate','severe-toxic']\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            \n            {(m.toxicClass > 0) ? (\n              <Tooltip label={toxicClasses[m.toxicClass]} placement=\"left\" hasArrow>\n                <span\n                  style={{\n                    backgroundColor: `${\n                      m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                    }`,\n                    marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                    marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                    borderRadius: \"20px\",\n                    padding: \"5px 15px\",\n                    maxWidth: \"75%\",\n                    outline: `1px solid ${colors[m.toxicClass]}`,\n                    marginBottom: \"10px\"\n                  }}\n                >\n                  {m.content}\n                </span>\n              </Tooltip>\n            ) : (\n              <span\n                style={{\n                  backgroundColor: `${\n                    m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                  }`,\n                  marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                  marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                  borderRadius: \"20px\",\n                  padding: \"5px 15px\",\n                  maxWidth: \"75%\",\n                  outline: (m.toxicClass > 0) ? `1px solid ${colors[m.toxicClass]}` : \"none\",\n                  marginBottom: \"10px\"\n                }}\n              >\n                {m.content}\n              </span>\n            )}\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n// import { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({ user,handleFunction }) => {\n  // const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#38B2AC\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 6000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 6000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 6000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 6000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Maru Bot Chat\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}